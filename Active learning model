#Active learning

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
import matplotlib.pyplot as plt

# Load your CSV dataset
crop_data = pd.read_csv("finalmerged.csv")

# Drop rows with missing values in 'Production' or 'Area'
crop_data = crop_data.dropna(subset=['Production', 'Area'])

# Assuming your target column is named 'Production'
Y = crop_data[['Production']]
X = crop_data[['Area']]  # Use double square brackets to select as DataFrame, not Series

# Split the data into initial labeled set and unlabeled set
X_labeled, X_unlabeled, y_labeled, y_unlabeled = train_test_split(X, Y, test_size=0.8, random_state=42)

# Define your model
model = Sequential()
model.add(Dense(64, input_shape=(X_labeled.shape[1],)))
model.add(Dense(1))

# Compile the model
model.compile(optimizer=Adam(), loss='mean_squared_error')


# Train initial model with labeled data
model.fit(X_labeled, y_labeled, epochs=10, batch_size=32)


# Active learning loop
num_iterations = 10
for i in range(num_iterations):
    # Predict on updated labeled data
    y_train_pred = model.predict(X_labeled)
    y_val_pred = model.predict(X_val)  # Ensure you compute predictions for validation data too
    
    # Your active learning logic goes here...

    # Retrain the model
    model.fit(X_labeled, y_labeled, epochs=10, batch_size=32)
    
    # Evaluate model performance
    y_pred = model.predict(X)
    mse = mean_squared_error(Y, y_pred)
    print(f"Iteration {i+1}, MSE: {mse:.4f}")
    
    # Calculate R^2 scores
    r2_train = r2_score(y_labeled, y_train_pred)
    r2_val1 = r2_score(y_val, y_val_pred)
    

    print(f"R^2 Score {r2_val1:.4f}")
    x_ax = range(len(y_pred))
    plt.scatter(x_ax, Y, s=5, color="blue", label="original")
    plt.plot(x_ax, y_pred, lw=0.8, color="red", label="predicted")
    plt.xlabel("Area")
    plt.ylabel("Production")
    

    plt.show()
