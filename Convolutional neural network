import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
crop_data=pd.read_csv("finalmerged.csv")

crop_data.shape


crop_data



from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Assuming crop_data contains your dataset
# Drop rows with missing values in 'Production' or 'Area'
crop_data = crop_data.dropna(subset=['Production', 'Area'])

#storing area in variable x

Y = crop_data[['Production']]
X = crop_data['Area']

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=1)

model = Sequential()
model.add(Dense(32, activation="relu", input_shape=(1,)))
model.add(Dense(64, activation="relu"))
model.add(Dense(1, activation="linear"))

model.compile(loss='mean_squared_error', optimizer='adam') #adjusts the learning rates for each parameter during training.
model.fit(x_train, y_train, epochs=10, batch_size=32, validation_data=(x_test, y_test))

# Predictions
y_pred = model.predict(x_test)

# Evaluate model on training data
train_loss = model.evaluate(x_train, y_train)
print(f"Training Loss: {train_loss}")

# Handle NaN values in y_test 
y_test = y_test.values.flatten()
y_pred = y_pred.flatten()

# Calculate mean squared error and R-squared
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"MSE: {mse:.4f}")
print(f"R2 score: {r2:.4f}")

# Plotting
x_ax = range(len(y_pred))
plt.scatter(x_ax, y_test, s=5, color="blue", label="original")
plt.plot(x_ax, y_pred, lw=0.8, color="red", label="predicted")
#plt.legend()
plt.show()
